definitions:
  docs.SwaggerAPIEmptyResponse:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.Empty'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  docs.SwaggerAPIErrorResponseString:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
        type: string
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  docs.SwaggerAPILoginResponse:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.LoginResponse'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  docs.SwaggerAPIMyAccountDetailResponse:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.MyAccountDetailVO'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  docs.SwaggerAPIProfileVOResponse:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.ProfileVO'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  docs.SwaggerAPITokenPairResponse:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.TokenPair'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  docs.SwaggerAPIUserListResponse:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.UserListResponse'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  docs.SwaggerAPIUserVOResponse:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.UserVO'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  docs.SwaggerAPIUserinfoResponse:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.Userinfo'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  dto.AccountLoginData:
    properties:
      account:
        description: 用户账号
        type: string
      password:
        description: 密码
        type: string
    required:
    - account
    - password
    type: object
  dto.AccountRegisterData:
    properties:
      account:
        description: 使用 "Account" 校验器
        type: string
      confirmPassword:
        description: 这里没有自定义格式校验器，但如果需要在服务端检查密码一致性，可以添加 `eqfield=Password`，不过这通常在前端或服务层处理。
        type: string
      password:
        description: 使用 "Password" 校验器
        type: string
    required:
    - account
    - confirmPassword
    - password
    type: object
  dto.CreateIdentityDTO:
    properties:
      credential:
        description: 凭证（如密码哈希、UnionID）
        example: hashed_password
        type: string
      identifier:
        description: 标识符（如账号、OpenID、手机号）
        example: user123
        type: string
      identity_type:
        allOf:
        - $ref: '#/definitions/enums.IdentityType'
        description: 身份类型（0=账号密码, 1=小程序, 2=手机号）
        example: 0
      user_id:
        description: 用户 ID
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - credential
    - identifier
    - identity_type
    - user_id
    type: object
  dto.CreateUserDTO:
    properties:
      status:
        allOf:
        - $ref: '#/definitions/enums.UserStatus'
        description: |-
          用户状态（0=活跃, 1=拉黑）
          - 必填字段，验证状态枚举值
        enum:
        - 0
        - 1
      user_role:
        allOf:
        - $ref: '#/definitions/enums.UserRole'
        description: |-
          用户角色（0=管理员, 1=普通用户, 2=客人）
          - 必填字段，验证角色枚举值
        enum:
        - 0
        - 1
        - 2
    type: object
  dto.PhoneLoginOrRegisterData:
    properties:
      code:
        description: 验证码，必填
        type: string
      phone:
        description: 手机号，必填
        type: string
    required:
    - code
    - phone
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  dto.SendCaptchaRequest:
    properties:
      phone:
        description: 手机号，必填且需符合格式
        type: string
    required:
    - phone
    type: object
  dto.UpdateIdentityDTO:
    properties:
      credential:
        description: 新凭证（如新密码哈希）
        example: new_hashed_password
        type: string
    required:
    - credential
    type: object
  dto.UpdateProfileDTO:
    properties:
      city:
        description: 城市 (可选更新)
        example: 深圳
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/enums.Gender'
        description: 性别（0=未知, 1=男, 2=女）(可选更新)
        example: 1
      nickname:
        description: 昵称 (可选更新)
        example: 小明
        type: string
      province:
        description: 省份 (可选更新)
        example: 广东
        type: string
    type: object
  dto.UpdateUserDTO:
    properties:
      status:
        allOf:
        - $ref: '#/definitions/enums.UserStatus'
        description: 用户状态（0=Active, 1=Blacklisted），可选
        enum:
        - 0
        - 1
        example: 0
      user_role:
        allOf:
        - $ref: '#/definitions/enums.UserRole'
        description: 用户角色（0=Admin, 1=User, 2=Guest），可选
        enum:
        - 0
        - 1
        - 2
        example: 1
    type: object
  dto.UserQueryDTO:
    properties:
      filters:
        additionalProperties: true
        description: 精确匹配条件（如 user_id="123", status=0）
        type: object
      like_filters:
        additionalProperties:
          type: string
        description: 模糊匹配条件（如 username LIKE "%test%"）
        example:
          '{"username"': ' "test"}'
        type: object
      order_by:
        description: 排序字段（如 "created_at DESC"）
        example: created_at DESC
        type: string
      page:
        description: 页码，默认 1
        example: 1
        minimum: 1
        type: integer
      page_size:
        description: 每页大小，默认 10
        example: 10
        maximum: 100
        minimum: 1
        type: integer
      time_range_filters:
        additionalProperties:
          items:
            type: string
          type: array
        description: 时间范围条件（如 created_at 在某个范围内）
        type: object
    type: object
  dto.WechatMiniProgramLoginData:
    properties:
      code:
        description: |-
          Code 微信小程序通过 wx.login() 获取的临时授权码
          - 必填，用于后端换取 openid 和 session_key
        type: string
    required:
    - code
    type: object
  enums.Gender:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-comments:
      Female: 女性
      Male: 男性
      Unknown: 未知
    x-enum-varnames:
    - Unknown
    - Male
    - Female
  enums.IdentityType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-comments:
      AccountPassword: 账号密码（网站）
      Phone: 手机号（APP）
      WechatMiniProgram: 微信（小程序）
    x-enum-varnames:
    - AccountPassword
    - WechatMiniProgram
    - Phone
  enums.UserRole:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-comments:
      RoleAdmin: 0 - 管理员，具有最高权限
      RoleGuest: 2 - 访客，限制性访问权限
      RoleUser: 1 - 普通用户，标准用户角色
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
    - RoleGuest
  enums.UserStatus:
    enum:
    - 0
    - 1
    type: integer
    x-enum-comments:
      StatusActive: 活跃，用户可以正常操作
      StatusBlacklisted: 拉黑，用户被禁止访问
    x-enum-varnames:
    - StatusActive
    - StatusBlacklisted
  map_string_string:
    additionalProperties:
      type: string
    type: object
  response.APIResponse-map_string_string:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/map_string_string'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  response.APIResponse-string:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
        type: string
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  response.APIResponse-vo_Empty:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.Empty'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  response.APIResponse-vo_IdentityList:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.IdentityList'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  response.APIResponse-vo_IdentityTypeList:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.IdentityTypeList'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  response.APIResponse-vo_IdentityVO:
    properties:
      code:
        description: 响应状态码，0 表示成功，其他值表示错误
        example: 0
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/vo.IdentityVO'
        description: 响应数据，类型由 T 指定，若无数据则为 nil，且在 JSON 中省略
      message:
        description: 可选的响应消息，若为空则不输出
        example: success
        type: string
    type: object
  vo.Empty:
    type: object
  vo.IdentityList:
    properties:
      items:
        items:
          $ref: '#/definitions/vo.IdentityVO'
        type: array
    type: object
  vo.IdentityTypeList:
    properties:
      items:
        items:
          $ref: '#/definitions/enums.IdentityType'
        type: array
    type: object
  vo.IdentityVO:
    properties:
      created_at:
        description: 创建时间
        example: "2023-01-01T00:00:00Z"
        type: string
      identifier:
        description: 标识符（如账号、OpenID、手机号）
        example: user123
        type: string
      identity_id:
        description: 身份 ID
        example: 1
        type: integer
      identity_type:
        allOf:
        - $ref: '#/definitions/enums.IdentityType'
        description: 身份类型（0=账号密码, 1=小程序, 2=手机号）
        example: 0
      updated_at:
        description: 更新时间
        example: "2023-01-01T00:00:00Z"
        type: string
      user_id:
        description: 用户 ID
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  vo.LoginResponse:
    properties:
      token:
        allOf:
        - $ref: '#/definitions/vo.TokenPair'
        description: Token 对
      userManage:
        allOf:
        - $ref: '#/definitions/vo.Userinfo'
        description: 用户信息
    type: object
  vo.MyAccountDetailVO:
    properties:
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      city:
        example: 深圳
        type: string
      created_at:
        description: 可以是 User 的创建时间
        example: "2023-01-01T00:00:00Z"
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/enums.Gender'
        example: 1
      nickname:
        description: 来自 UserProfile 实体
        example: 小明
        type: string
      province:
        example: 广东
        type: string
      status:
        allOf:
        - $ref: '#/definitions/enums.UserStatus'
        description: 来自 User 实体
        example: 0
      updated_at:
        description: 可以是 User 或 Profile 中较新的更新时间
        example: "2023-01-01T00:00:00Z"
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      user_role:
        allOf:
        - $ref: '#/definitions/enums.UserRole'
        description: 来自 User 实体
        example: 1
    type: object
  vo.ProfileVO:
    properties:
      avatar_url:
        description: 头像 URL
        example: https://example.com/avatar.jpg
        type: string
      city:
        description: 城市
        example: 深圳
        type: string
      created_at:
        description: 创建时间
        example: "2023-01-01T00:00:00Z"
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/enums.Gender'
        description: 性别（0=未知, 1=男, 2=女）
        example: 1
      nickname:
        description: 昵称
        example: 小明
        type: string
      province:
        description: 省份
        example: 广东
        type: string
      updated_at:
        description: 更新时间
        example: "2023-01-01T00:00:00Z"
        type: string
      user_id:
        description: 用户 ID
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  vo.TokenPair:
    properties:
      access_token:
        description: 新认证令牌
        type: string
      refresh_token:
        description: 新刷新令牌（可选）
        type: string
    type: object
  vo.UserListResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/vo.UserWithProfileVO'
        type: array
    type: object
  vo.UserVO:
    properties:
      created_at:
        description: 创建时间
        example: "2023-01-01T00:00:00Z"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/enums.UserStatus'
        description: 用户状态（0=Active, 1=Blacklisted）
        example: 0
      updated_at:
        description: 更新时间
        example: "2023-01-01T00:00:00Z"
        type: string
      user_id:
        description: 用户 ID
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      user_role:
        allOf:
        - $ref: '#/definitions/enums.UserRole'
        description: 用户角色（0=Admin, 1=User, 2=Guest）
        example: 1
    type: object
  vo.UserWithProfileVO:
    properties:
      avatar_url:
        description: 头像 URL
        example: https://example.com/avatar.jpg
        type: string
      city:
        description: 城市
        example: 深圳
        type: string
      created_at:
        description: 创建时间
        example: "2023-01-01T00:00:00Z"
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/enums.Gender'
        description: 性别（0=未知, 1=男, 2=女）
        example: 1
      nickname:
        description: 昵称
        example: 小明
        type: string
      province:
        description: 省份
        example: 广东
        type: string
      role:
        allOf:
        - $ref: '#/definitions/enums.UserRole'
        description: 用户角色（0=Admin, 1=User, 2=Guest）
        example: 1
      status:
        allOf:
        - $ref: '#/definitions/enums.UserStatus'
        description: 用户状态（0=Active, 1=Blacklisted）
        example: 0
      updated_at:
        description: 更新时间
        example: "2023-01-01T00:00:00Z"
        type: string
      user_id:
        description: 用户 ID
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  vo.Userinfo:
    properties:
      userID:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: 用户中心服务 API 文档
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Hub API
  version: "1.0"
paths:
  /api/v1/user-hub/account/login:
    post:
      consumes:
      - application/json
      description: 用户通过提供账号和密码来获取认证令牌。
      parameters:
      - description: 登录信息 (账号、密码)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.AccountLoginData'
      - default: web
        description: 客户端平台类型
        enum:
        - web
        - wechat
        - app
        in: header
        name: X-Platform
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 登录成功，返回用户信息及访问和刷新令牌
          schema:
            $ref: '#/definitions/docs.SwaggerAPILoginResponse'
        "400":
          description: 请求参数无效 (如JSON格式错误、平台类型无效) 或 业务逻辑错误 (如账号不存在、密码错误、用户状态异常)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库操作失败、令牌生成失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 账号密码登录
      tags:
      - 账号密码认证
  /api/v1/user-hub/account/register:
    post:
      consumes:
      - application/json
      description: 用户通过提供账号、密码和确认密码来创建新账户。
      parameters:
      - description: 注册信息 (账号、密码、确认密码)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.AccountRegisterData'
      produces:
      - application/json
      responses:
        "200":
          description: 注册成功，返回用户信息（通常只有用户ID）
          schema:
            $ref: '#/definitions/docs.SwaggerAPIUserinfoResponse'
        "400":
          description: 请求参数无效 (如JSON格式错误、必填项缺失) 或 业务逻辑错误 (如账号已存在、密码不一致)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库操作失败、密码加密失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 账号密码注册
      tags:
      - 账号密码认证
  /api/v1/user-hub/auth/logout:
    post:
      consumes:
      - application/json
      description: 用户请求吊销其当前的认证令牌（通常是 Refresh Token），使其失效。客户端应在调用此接口后清除本地存储的令牌。
      parameters:
      - description: Bearer <需要吊销的令牌>
        example: '"Bearer eyJhbGciOiJI..."'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 退出登录成功
          schema:
            $ref: '#/definitions/docs.SwaggerAPIEmptyResponse'
        "400":
          description: 请求格式错误 (如缺少 Authorization 头或格式非 Bearer)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "401":
          description: 认证失败 (通常由 AuthMiddleware 处理，此接口本身逻辑较少触发)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如 Redis 操作失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 退出登录
      tags:
      - 认证管理 (Auth Management)
  /api/v1/user-hub/auth/refresh-token:
    post:
      consumes:
      - application/json
      description: 使用有效的 Refresh Token 获取一对新的 Access Token 和 Refresh Token。支持从请求体或
        Cookie 中获取 Refresh Token。
      parameters:
      - description: 请求体 (可选)，包含 refresh_token 字段
        in: body
        name: request
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 刷新成功，返回新的令牌对
          schema:
            $ref: '#/definitions/docs.SwaggerAPITokenPairResponse'
        "400":
          description: 请求参数错误 (如未提供有效的 Refresh Token)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "401":
          description: 认证失败 (Refresh Token 无效、已过期、已被吊销或用户状态异常)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库操作失败、令牌生成失败、Redis 操作失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 刷新令牌
      tags:
      - 认证管理 (Auth Management)
  /api/v1/user-hub/auth/send-captcha:
    post:
      consumes:
      - application/json
      description: 向用户指定的手机号发送一个6位随机数字验证码，该验证码在5分钟内有效。
      parameters:
      - description: 请求体，包含目标手机号
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SendCaptchaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 验证码发送成功（响应体中不包含验证码）
          schema:
            $ref: '#/definitions/docs.SwaggerAPIEmptyResponse'
        "400":
          description: 请求参数无效 (如JSON格式错误、手机号格式不正确)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如短信服务发送失败、Redis存储失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 发送短信验证码
      tags:
      - 认证辅助 (Auth Helper)
  /api/v1/user-hub/identities:
    post:
      consumes:
      - application/json
      description: 用户或管理员为指定用户绑定一种新的登录方式（如新的账号密码、关联社交账号等）。
      parameters:
      - description: 创建身份请求的详细信息，包括用户ID、身份类型、标识符和凭证
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateIdentityDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 身份创建成功，返回新创建的身份信息
          schema:
            $ref: '#/definitions/response.APIResponse-vo_IdentityVO'
        "400":
          description: 请求参数无效 (如JSON格式错误、必填项缺失) 或 业务逻辑错误 (如身份标识已存在)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
        "500":
          description: 系统内部错误 (如数据库操作失败、密码加密失败)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
      summary: 创建新身份
      tags:
      - 身份管理 (Identity Management)
  /api/v1/user-hub/identities/{identityID}:
    delete:
      consumes:
      - application/json
      description: 用户或管理员注销或移除某个特定的登录方式（身份记录）。
      parameters:
      - description: 要删除的身份记录的唯一ID
        format: uint
        in: path
        name: identityID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 身份删除成功
          schema:
            $ref: '#/definitions/response.APIResponse-vo_Empty'
        "400":
          description: 请求参数无效 (如身份ID格式无效)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
        "404":
          description: 指定的身份记录不存在 (如果服务层认为删除不存在的记录是错误)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
        "500":
          description: 系统内部错误 (如数据库操作失败)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
      summary: 删除身份
      tags:
      - 身份管理 (Identity Management)
    put:
      consumes:
      - application/json
      description: 用户或管理员修改指定身份ID的凭证信息（例如，重置密码）。
      parameters:
      - description: 要更新的身份记录的唯一ID
        format: uint
        in: path
        name: identityID
        required: true
        type: integer
      - description: 更新身份请求的详细信息，主要包含新的凭证
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateIdentityDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 身份信息更新成功，返回更新后的身份信息
          schema:
            $ref: '#/definitions/response.APIResponse-vo_IdentityVO'
        "400":
          description: 请求参数无效 (如JSON格式错误、身份ID格式无效、新凭证无效)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
        "404":
          description: 指定的身份记录不存在
          schema:
            $ref: '#/definitions/response.APIResponse-string'
        "500":
          description: 系统内部错误 (如数据库操作失败、密码加密失败)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
      summary: 更新身份信息
      tags:
      - 身份管理 (Identity Management)
  /api/v1/user-hub/phone/login:
    post:
      consumes:
      - application/json
      description: 用户通过提供手机号和接收到的短信验证码来登录或自动注册账户。
      parameters:
      - description: 登录/注册信息 (手机号、验证码)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.PhoneLoginOrRegisterData'
      - default: web
        description: 客户端平台类型
        enum:
        - web
        - wechat
        - app
        in: header
        name: X-Platform
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 登录或注册成功，返回用户信息及访问和刷新令牌
          schema:
            $ref: '#/definitions/docs.SwaggerAPILoginResponse'
        "400":
          description: 请求参数无效 (如JSON格式错误、平台类型无效) 或 业务逻辑错误 (如验证码错误或过期、用户状态异常)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库操作失败、令牌生成失败、Redis操作失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 手机号登录或注册
      tags:
      - 手机号认证
  /api/v1/user-hub/profile:
    get:
      consumes:
      - application/json
      description: 获取当前认证用户的核心账户信息（如角色、状态）和详细个人资料（如昵称、头像）。
      produces:
      - application/json
      responses:
        "200":
          description: 获取账户详情成功
          schema:
            $ref: '#/definitions/docs.SwaggerAPIMyAccountDetailResponse'
        "401":
          description: 未授权或认证失败
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据不一致或数据库查询失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 获取我的账户详情 (核心信息 + 资料)
      tags:
      - 资料管理 (Profile Management)
    put:
      consumes:
      - application/json
      description: 当前认证用户更新自己的个人资料信息（如昵称、性别、地区等）。头像更新请使用专门的头像上传接口。
      parameters:
      - description: 包含待更新字段的资料信息（不含头像URL）
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 资料更新成功，返回更新后的资料信息
          schema:
            $ref: '#/definitions/docs.SwaggerAPIProfileVOResponse'
        "400":
          description: 请求参数无效 (如JSON格式错误)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "401":
          description: 未授权或认证失败
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库操作失败或用户资料不存在)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 更新我的用户资料
      tags:
      - 资料管理 (Profile Management)
  /api/v1/user-hub/profile/avatar:
    post:
      consumes:
      - multipart/form-data
      description: 当前认证用户上传自己的头像文件。成功后返回新的头像URL。
      parameters:
      - description: '头像文件 (multipart/form-data key: ''avatar'')'
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 头像上传成功，返回包含新头像URL的map
          schema:
            $ref: '#/definitions/response.APIResponse-map_string_string'
        "400":
          description: 请求无效 (如文件过大、类型不支持、未提供文件)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "401":
          description: 未授权或认证失败
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如文件上传到COS失败、数据库更新失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 上传我的头像
      tags:
      - 资料管理 (Profile Management)
  /api/v1/user-hub/users:
    post:
      consumes:
      - application/json
      description: 管理员根据提供的角色和状态信息创建一个新的用户账户。用户ID由系统自动生成。
      parameters:
      - description: 创建用户请求，包含用户角色和初始状态
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 用户创建成功，返回新创建的用户信息
          schema:
            $ref: '#/definitions/docs.SwaggerAPIUserVOResponse'
        "400":
          description: 请求参数无效 (如JSON格式错误、角色或状态值无效)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "403":
          description: 权限不足 (非管理员操作)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库操作失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 创建新用户 (管理员)
      tags:
      - 用户管理 (User Management)
  /api/v1/user-hub/users/{userID}:
    delete:
      consumes:
      - application/json
      description: 管理员（软）删除指定的用户账户及其所有关联数据（如身份、资料）。
      parameters:
      - description: 要删除的用户ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 用户删除成功
          schema:
            $ref: '#/definitions/docs.SwaggerAPIEmptyResponse'
        "400":
          description: 请求参数无效 (如用户ID为空)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "403":
          description: 权限不足 (非管理员操作)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "404":
          description: 指定的用户不存在 (如果服务层认为删除不存在的用户是错误)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库事务失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 删除用户 (管理员)
      tags:
      - 用户管理 (User Management)
    get:
      consumes:
      - application/json
      description: 根据提供的用户ID获取该用户的核心账户信息（角色、状态、创建/更新时间等）。
      parameters:
      - description: 要查询的用户ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取用户信息成功
          schema:
            $ref: '#/definitions/docs.SwaggerAPIUserVOResponse'
        "400":
          description: 请求参数无效 (如用户ID为空)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "403":
          description: 权限不足 (非管理员或用户本人)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "404":
          description: 指定的用户不存在
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库查询失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 获取用户信息
      tags:
      - 用户管理 (User Management)
    put:
      consumes:
      - application/json
      description: 管理员更新指定用户的角色和状态。
      parameters:
      - description: 要更新的用户ID
        in: path
        name: userID
        required: true
        type: string
      - description: 包含待更新角色和/或状态的请求体
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 用户信息更新成功，返回更新后的用户信息
          schema:
            $ref: '#/definitions/docs.SwaggerAPIUserVOResponse'
        "400":
          description: 请求参数无效 (如JSON格式错误、用户ID为空、角色或状态值无效)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "403":
          description: 权限不足 (非管理员操作)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "404":
          description: 指定的用户不存在
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库操作失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 更新用户信息 (管理员)
      tags:
      - 用户管理 (User Management)
  /api/v1/user-hub/users/{userID}/blacklist:
    put:
      consumes:
      - application/json
      description: 管理员将指定的用户账户状态设置为“拉黑”，阻止其登录或访问受限资源。
      parameters:
      - description: 要拉黑的用户ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 用户已成功拉黑
          schema:
            $ref: '#/definitions/docs.SwaggerAPIEmptyResponse'
        "400":
          description: 请求参数无效 (如用户ID为空)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "403":
          description: 权限不足 (非管理员操作)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "404":
          description: 指定的用户不存在
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库操作失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 拉黑用户 (管理员)
      tags:
      - 用户管理 (User Management)
  /api/v1/user-hub/users/{userID}/identities:
    get:
      consumes:
      - application/json
      description: 管理员或用户本人查看指定用户ID关联的所有登录方式/身份凭证信息（不含敏感凭证内容）。
      parameters:
      - description: 要查询的用户ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取用户身份列表成功
          schema:
            $ref: '#/definitions/response.APIResponse-vo_IdentityList'
        "400":
          description: 请求参数无效 (如用户ID为空)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
        "404":
          description: 指定的用户不存在 (如果服务层检查用户存在性)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
        "500":
          description: 系统内部错误 (如数据库查询失败)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
      summary: 获取用户的所有身份信息
      tags:
      - 身份管理 (Identity Management)
  /api/v1/user-hub/users/{userID}/identity-types:
    get:
      consumes:
      - application/json
      description: 用户或系统查看指定用户ID已绑定的所有登录方式的类型列表。
      parameters:
      - description: 要查询的用户ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取用户身份类型列表成功
          schema:
            $ref: '#/definitions/response.APIResponse-vo_IdentityTypeList'
        "400":
          description: 请求参数无效 (如用户ID为空)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
        "404":
          description: 指定的用户不存在 (如果服务层检查用户存在性)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
        "500":
          description: 系统内部错误 (如数据库查询失败)
          schema:
            $ref: '#/definitions/response.APIResponse-string'
      summary: 获取用户的所有身份类型
      tags:
      - 身份管理 (Identity Management)
  /api/v1/user-hub/users/{userID}/profile:
    get:
      consumes:
      - application/json
      description: (管理员权限) 根据提供的用户ID，获取该用户的详细个人资料信息（昵称、头像等）。
      parameters:
      - description: 要查询的用户ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取用户资料成功
          schema:
            $ref: '#/definitions/docs.SwaggerAPIProfileVOResponse'
        "400":
          description: 请求参数无效 (如用户ID为空)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "403":
          description: 权限不足 (非管理员操作)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "404":
          description: 指定用户的资料不存在
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库查询失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 获取指定用户资料 (管理员)
      tags:
      - 用户管理 (User Management)
  /api/v1/user-hub/users/query:
    post:
      consumes:
      - application/json
      description: 管理员根据指定的过滤、排序和分页条件，查询用户列表及其关联的 Profile 信息。
      parameters:
      - description: 查询条件 (过滤、排序、分页)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UserQueryDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 查询成功，返回用户列表和总记录数
          schema:
            $ref: '#/definitions/docs.SwaggerAPIUserListResponse'
        "400":
          description: 请求参数无效 (如JSON格式错误、分页参数超出范围)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "403":
          description: 权限不足 (非管理员操作)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如数据库查询失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 分页查询用户及其资料 (管理员)
      tags:
      - 用户查询 (User Query)
  /api/v1/user-hub/wechat/login:
    post:
      consumes:
      - application/json
      description: 用户通过提供微信小程序 wx.login() 获取的 code，进行登录或（如果首次登录）自动注册账户。
      parameters:
      - description: 包含微信小程序 code 的请求体
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.WechatMiniProgramLoginData'
      - default: wechat
        description: 客户端平台类型
        enum:
        - web
        - wechat
        - app
        in: header
        name: X-Platform
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 登录或注册成功，返回用户信息及访问和刷新令牌
          schema:
            $ref: '#/definitions/docs.SwaggerAPILoginResponse'
        "400":
          description: 请求参数无效 (如JSON格式错误、code为空、平台类型无效) 或 业务逻辑错误 (如微信 code 无效或已过期、用户状态异常)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
        "500":
          description: 系统内部错误 (如调用微信API失败、数据库操作失败、令牌生成失败)
          schema:
            $ref: '#/definitions/docs.SwaggerAPIErrorResponseString'
      summary: 微信小程序登录或注册
      tags:
      - 微信小程序认证
schemes:
- http
- https
swagger: "2.0"
